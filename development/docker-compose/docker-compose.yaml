# https://docs.docker.com/compose/compose-file/

x-common-variables: &common-variables
  JAVA_TOOL_OPTIONS: -XX:MaxRAMPercentage=60.0 -Dlogging.level.com.backbase=DEBUG
  SIG_SECRET_KEY: JWTSecretKeyDontUseInProduction!
  USERCTX_KEY: JWTSecretKeyDontUseInProduction!
  EXTERNAL_ENC_SECRET_KEY: "JWTEncKeyDontUseInProduction666!"
  eureka.client.serviceUrl.defaultZone: http://registry:8080/eureka
  eureka.client.healthcheck.enabled: true
  eureka.instance.non-secure-port: 8080
  eureka.instance.initialStatus: STARTING
  management.endpoints.web.exposure.include: '*'
  management.endpoints.enabled-by-default: true
  management.security.roles: ANONYMOUS,ACTUATOR,USER
  spring.main.banner-mode: off
  spring.zipkin.enabled: false
  spring.cloud.config.enabled: false
  spring.cloud.kubernetes.enabled: false
  backbase-env-jwt: "JWTSecretKeyDontUseInProduction!"
  backbase.audit.enabled: false
  backbase.security.public.paths: /integration-api/**
  backbase.security.mtls.enabled: false

x-database-variables: &database-variables
  logging.level.liquibase: INFO
  spring.liquibase.enabled: true
  spring.datasource.username: root
  spring.datasource.password: root
  spring.datasource.driver-class-name: com.mysql.cj.jdbc.Driver
  spring.jpa.properties.hibernate.dialect: org.hibernate.dialect.MySQL8Dialect

x-message-broker-variables: &message-broker-variables
  spring.activemq.broker-url: tcp://activemq:61616
  spring.activemq.user: admin
  spring.activemq.password: admin

x-healthcheck-defaults: &healthcheck-defaults
  start_period: 60s
  interval: 15s
  timeout: 5s
  retries: 15

volumes:
  backbase_mysql_data:
    driver: local

networks:
  default:
    name: backbase_default

services:

  mysql:
    container_name: mysql
    image: mysql:8.0.31
    ports:
      - "3306:3306"
    environment:
      MYSQL_ROOT_PASSWORD: root
    volumes:
      - backbase_mysql_data:/var/lib/mysql
    healthcheck:
      test: mysqladmin ping --silent
      interval: 10s
      timeout: 5s
      retries: 5

  activemq:
    container_name: activemq
    image: symptoma/activemq:5.17.3
    privileged: true
    ports:
      - "61616:61616"
      - "8161:8161"
    healthcheck:
      test: /opt/activemq/bin/activemq query --objname type=Broker,brokerName=*,service=Health | grep Good
      interval: 10s
      timeout: 5s
      retries: 5

  registry:
    container_name: registry
    image: ${MY_REPO}/registry:${BB_VERSION}
    ports:
      - "8761:8080"
    environment:
      "SIG_SECRET_KEY": "JWTSecretKeyDontUseInProduction!"
      "USERCTX_KEY": "JWTSecretKeyDontUseInProduction!"
      "EXTERNAL_ENC_SECRET_KEY": "JWTEncKeyDontUseInProduction666!"
      "backbase-env-jwt": "JWTEncKeyDontUseInProduction666!"
    volumes:
      - ./scripts/HealthCheck.java:/tmp/HealthCheck.java
    healthcheck:
      <<: *healthcheck-defaults
      test: [ "CMD", "java", "/tmp/HealthCheck.java" ]

  edge:
    container_name: edge
    image: ${MY_REPO}/edge:${BB_VERSION}
    ports:
      - "8280:8080"
    environment:
      <<: *common-variables
      eureka.instance.hostname: localhost
      eureka.instance.nonSecurePort: 7777
      eureka.instance.preferIpAddress: false
      eureka.client.serviceUrl.defaultZone: http://registry:8080/eureka/
      "GATEWAY_ACTUATOR_USER": "admin"
      "GATEWAY_ACTUATOR_PASSWORD": "admin"
      "GATEWAY_TOKEN_CONVERTER_URI": "http://token-converter:8080/convert"
    volumes:
      - ./scripts/HealthCheck.java:/tmp/HealthCheck.java
    healthcheck:
      <<: *healthcheck-defaults
      test: [ "CMD", "java", "/tmp/HealthCheck.java", "http://registry:8080/eureka/apps/edge", "<status>UP</status>" ]
    links:
      - registry
      - token-converter

  token-converter:
    container_name: token_converter
    image: ${MY_REPO}/oidc-token-converter-service:${BB_VERSION}
    ports:
      - "7779:8080"
    environment:
      <<: *common-variables
      backbase.oidc-token-converter.whitelistedDomains[0].internalHostScheme: http
      backbase.oidc-token-converter.whitelistedDomains[0].internalHost: backbase-identity:8080
      backbase.oidc-token-converter.whitelistedDomains[0].issuerHost: localhost
    volumes:
      - ./scripts:/tmp/h
    healthcheck:
      <<: *healthcheck-defaults
      test: [ "CMD", "java", "/tmp/h/HealthCheck.java", "http://registry:8080/eureka/apps/token-converter", "<status>UP</status>" ]
    links:
      - registry
      - backbase-identity

  backbase-identity:
    container_name: backbase_identity
    image: ${MY_REPO}/backbase-identity:${BB_VERSION}
    ports:
      - '8180:8080'
    environment:
      QUARKUS_DATASOURCE_URL: "jdbc:mysql://mysql:3306/backbase_identity?useSSL=false&allowPublicKeyRetrieval=true&cacheServerConfiguration=true&createDatabaseIfNotExist=true"
      QUARKUS_DATASOURCE_USERNAME: "root"
      QUARKUS_DATASOURCE_PASSWORD: "root"
      QUARKUS_DATASOURCE_DRIVER: "com.mysql.cj.jdbc.Driver"
      QUARKUS_LOG_FILE_ENABLE: "false"
      KEYCLOAK_ADMIN: "admin"
      KEYCLOAK_ADMIN_PASSWORD: "admin"
      KEYCLOAK_HOME_DIR: "/"
      KEYCLOAK_CONNECTIONSJPA_QUARKUS_INITIALIZEEMPTY: "true"
      KEYCLOAK_CONNECTIONSJPA_QUARKUS_MIGRATIONSTRATEGY: "update"
      KEYCLOAK_BACKBASE_OIDC_TOKEN_CONVERTER_URL: "http://token-converter:8080"
      keycloak.hostname.default.frontendUrl: "http://10.162.86.210:8180/auth"
      JAVA_TOOL_OPTIONS: "-Dkeycloak.migration.strategy=IGNORE_EXISTING -Dkeycloak.migration.action=import -Dkeycloak.profile.feature.upload_scripts=enabled -Dquarkus.log.category.'\"com.backbase\"'.level=DEBUG"
    volumes:
      - ../config/identity:/tmp/keycloak-export
      - ./scripts:/tmp/h
    healthcheck:
      <<: *healthcheck-defaults
      test: [ "CMD", "java", "/tmp/h/HealthCheck.java", "http://localhost:8080/auth/realms/backbase/.well-known/openid-configuration", "backbase" ]
    depends_on:
      mysql:
        condition: service_healthy

  access-control:
    container_name: access_control
    image: ${MY_REPO}/access-control:${BB_VERSION}
    ports:
      - "8040:8080"
    environment:
      <<: [*common-variables, *message-broker-variables, *database-variables]
      spring.datasource.url: jdbc:mysql://mysql:3306/access-control?useSSL=false&allowPublicKeyRetrieval=true&cacheServerConfiguration=true&createDatabaseIfNotExist=true
      "SPRING_CLOUD_CONFIG_ENABLED": "false"
      "SPRING_CLOUD_CONFIG_FAILFAST": "false"
      "SPRING_LIQUIBASE_ENABLED": "false"
      "KEYCLOAK_CONNECTIONSJPA_QUARKUS_INITIALIZEEMPTY": "true"
      "BACKBASE_APPROVAL_LEVEL_ENABLED": "true"
      "SPRING_DATASOURCE_USERNAME_USER_MANAGER": "user_manager"
      "SPRING_DATASOURCE_PASSWORD_USER_MANAGER": "root"
      "SPRING_DATASOURCE_USERNAME_USER_PROFILR_MANAGER": "user_profile_manager"
      "SPRING_DATASOURCE_PASSWORD_USER_PROFILR_MANAGER": "root"
      "SSO_JWT_INTERNAL_SIGNATURE_KEY": "JWTSecretKeyDontUseInProduction!"
      "BACKBASE_USERCONTEXT_JWTTOKENEXPIRATION": "300"
      "BACKBASE_USERCONTEXT_SIGNATUREANDENCRYPTION_KEY": "JWTSecretKeyDontUseInProduction!"
      "liquibase.oracle.ignoreRecycleBin": "true"
    volumes:
      - ./scripts:/tmp/h
    healthcheck:
      <<: *healthcheck-defaults
      test: [ "CMD", "java", "/tmp/h/HealthCheck.java", "http://registry:8080/eureka/apps/access-control", "<status>UP</status>" ]
    depends_on:
      mysql:
        condition: service_healthy
    links:
      - activemq
      - registry

  arrangement-manager:
    container_name: arrangement_manager
    image: ${MY_REPO}/arrangement-manager:${BB_VERSION}
    ports:
      - "8050:8080"
    environment:
      <<: [*common-variables, *message-broker-variables, *database-variables]
      spring.datasource.url: jdbc:mysql://mysql:3306/arrangement-manager?useSSL=false&allowPublicKeyRetrieval=true&cacheServerConfiguration=true&createDatabaseIfNotExist=true
    volumes:
      - ./scripts:/tmp/h
    healthcheck:
      <<: *healthcheck-defaults
      test: [ "CMD", "java", "/tmp/h/HealthCheck.java", "http://registry:8080/eureka/apps/arrangement-manager", "<status>UP</status>" ]
    depends_on:
      mysql:
        condition: service_healthy
    links:
      - activemq
      - registry

  transaction-manager:
    container_name: transaction_manager
    image: ${MY_REPO}/transaction-manager:${BB_VERSION}
    ports:
      - "8059:8080"
    environment:
      <<: [*common-variables, *message-broker-variables, *database-variables]
      spring.datasource.url: jdbc:mysql://mysql:3306/transaction-manager?useSSL=false&allowPublicKeyRetrieval=true&cacheServerConfiguration=true&createDatabaseIfNotExist=true
    volumes:
      - ./scripts:/tmp/h
    healthcheck:
      <<: *healthcheck-defaults
      test: [ "CMD", "java", "/tmp/h/HealthCheck.java", "http://registry:8080/eureka/apps/transaction-manager", "<status>UP</status>" ]
    depends_on:
      mysql:
        condition: service_healthy
    links:
      - activemq
      - registry

  user-manager:
    container_name: user_manager
    image: ${MY_REPO}/user-manager:${BB_VERSION}
    ports:
      - "8060:8080"
    environment:
      <<: [*common-variables, *message-broker-variables, *database-variables]
      spring.datasource.url: jdbc:mysql://mysql:3306/user-manager?useSSL=false&allowPublicKeyRetrieval=true&cacheServerConfiguration=true&createDatabaseIfNotExist=true
      "SPRING_RESTTEMPLATE_REQUESTFACTORY_SSLCONTEXT_VERIFY": "false"
      "BACKBASE_COMMUNICATION_SERVICES_USER_PROFILE_SERVICE_ID": "user-integration-external-mock"
      "BACKBASE_USERS_CACHE_ENABLED": "true"
      "BACKBASE_USERS_ENABLECBSUNAVAILABILITY": "true"
      "BACKBASE_USERS_IDENTITY_ENDPOINTS_ENABLED": "true"
      "BACKBASE_USERS_IDENTITY_INTEGRATION_ENABLED": "true"
      "BACKBASE_AUTHENTICATORS_CHANNELS_SMS": "true"
      "BACKBASE_USERS_SYNC_PRIMARY_TO_IDENTITY_ENABLED": "true"
    volumes:
      - ./scripts:/tmp/h
    healthcheck:
      <<: *healthcheck-defaults
      test: [ "CMD", "java", "/tmp/h/HealthCheck.java", "http://registry:8080/eureka/apps/user-manager", "<status>UP</status>" ]
    depends_on:
      mysql:
        condition: service_healthy
    links:
      - activemq
      - registry

  identity-integration-service:
    container_name: identity_integration_service
    image: ${MY_REPO}/identity-integration-service:${BB_VERSION}
    ports:
      - "8070:8080"
    environment:
      <<: *common-variables
      identity.serverUrl: http://backbase-identity:8080/auth
      identity.masterAdmin.username: admin
      identity.masterAdmin.password: admin
      identity.realmConfiguration.fallbackOptions.enableUser: true
      identity.realmConfiguration.fallbackOptions.useTemporaryPassword: true
    volumes:
      - ./scripts:/tmp/h
    healthcheck:
      <<: *healthcheck-defaults
      test: [ "CMD", "java", "/tmp/h/HealthCheck.java", "http://registry:8080/eureka/apps/identity-integration-service", "<status>UP</status>" ]
    links:
      - registry
      - backbase-identity

  wiremock:
    container_name: wiremock
    image: wiremock/wiremock:2.32.0
    profiles:
      - with-mocks
    command:
      - --global-response-templating
      - --verbose
    volumes:
      - ./stubs:/home/wiremock

  postman-health-check:
    container_name: health_checks
    image: postman/newman
    platform: linux/amd64
    command:
      run /etc/newman/postman_collection.json --environment="/etc/newman/postman_environment.json"
    volumes:
      -  ../../test/postman/HealthCheck_Local-Backend-Environment.postman_collection.json:/etc/newman/postman_collection.json
      -  ../../test/postman/Docker-Backend-Environment.postman_environment.json:/etc/newman/postman_environment.json
    depends_on:
      access-control:
        condition: service_healthy
      arrangement-manager:
        condition: service_healthy
      backbase-identity:
        condition: service_healthy
      identity-integration-service:
        condition: service_healthy
      token-converter:
        condition: service_healthy
      user-manager:
        condition: service_healthy

  legalentity-integration-service:
    container_name: legalentity_integration_service
    image: ${MY_REPO}/legalentity-integration-service:${BB_VERSION}
    ports:
      - "8051:8080"
    environment:
      <<: [*common-variables, *message-broker-variables]
      "BACKBASE_AUTHENTICATORS_CHANNELS_SMS": "true"
      "BACKBASE_AUTHENTICATORS_CHANNELS_EMAIL": "true"
    volumes:
      - ./scripts:/tmp/h
    healthcheck:
      <<: *healthcheck-defaults
      test: [ "CMD", "java", "/tmp/h/HealthCheck.java", "http://registry:8080/eureka/apps/legalentity-integration-service", "<status>UP</status>" ]
    links:
      - activemq
      - registry

  legalentity-integration-outbound-service:
    container_name: legalentity_integration_outbound_service
    image: ${MY_REPO}/legalentity-integration-outbound-service:2022.08.3-LTS-0.1.0
    ports:
      - "8052:8080"
    environment:
      <<: [*common-variables, *message-broker-variables]
    volumes:
      - ./scripts:/tmp/h
    healthcheck:
      <<: *healthcheck-defaults
      test: [ "CMD", "java", "/tmp/h/HealthCheck.java", "http://registry:8080/eureka/apps/legalentity-integration-outbound-service", "<status>UP</status>" ]
    links:
      - activemq
      - registry

#  legalentity-integration-external-mock:
#    container_name: legalentity_integration_external_mock
#    image: ${MY_REPO}/legalentity-integration-external-mock:${BB_VERSION}
#    ports:
#      - "8053:8080"
#    environment:
#      <<: [*common-variables, *message-broker-variables]
#    volumes:
#      - ./scripts:/tmp/h
#    healthcheck:
#      <<: *healthcheck-defaults
#      test: [ "CMD", "java", "/tmp/h/HealthCheck.java", "http://registry:8080/eureka/apps/legalentity-integration-external-mock", "<status>UP</status>" ]
#    links:
#      - activemq
#      - registry

  user-profile-manager:
    container_name: user_profile_manager
    image: ${MY_REPO}/user-profile-manager:${BB_VERSION}
    ports:
      - "8054:8080"
    environment:
      <<: [*common-variables, *message-broker-variables, *database-variables]
      spring.datasource.url: jdbc:mysql://mysql:3306/user-profile-manager?useSSL=false&allowPublicKeyRetrieval=true&cacheServerConfiguration=true&createDatabaseIfNotExist=true
      "BACKBASE_AUTHENTICATORS_CHANNELS_SMS": "true"
      "liquibase.oracle.ignoreRecycleBin": "true"
    volumes:
      - ./scripts:/tmp/h
    healthcheck:
      <<: *healthcheck-defaults
      test: [ "CMD", "java", "/tmp/h/HealthCheck.java", "http://registry:8080/eureka/apps/user-profile-manager", "<status>UP</status>" ]
    depends_on:
      mysql:
        condition: service_healthy
    links:
      - activemq
      - registry

  user-integration-external-mock:
    container_name: user_integration_external_mock
    image: ${MY_REPO}/user-integration-external-mock:${BB_VERSION}
    ports:
      - "8057:8080"
    environment:
      <<: [*common-variables, *message-broker-variables]
      "BACKBASE_AUTHENTICATORS_CHANNELS_SMS": "true"
      "BACKBASE_AUTHENTICATORS_CHANNELS_EMAIL": "true"
    volumes:
      - ./scripts:/tmp/h
    healthcheck:
      <<: *healthcheck-defaults
      test: [ "CMD", "java", "/tmp/h/HealthCheck.java", "http://registry:8080/eureka/apps/user-integration-external-mock", "<status>UP</status>" ]
    links:
      - activemq
      - registry

  user-profile-core-mock:
    container_name: user_profile_core_mock
    image: ${MY_REPO}/user-profile-core-mock:${BB_VERSION}
    ports:
      - "8055:8080"
    environment:
      <<: [*common-variables, *message-broker-variables]
    volumes:
      - ./scripts:/tmp/h
    healthcheck:
      <<: *healthcheck-defaults
      test: [ "CMD", "java", "/tmp/h/HealthCheck.java", "http://registry:8080/eureka/apps/user-profile-core-mock", "<status>UP</status>" ]
    links:
      - activemq
      - registry

  accessgroup-integration-service:
    container_name: accessgroup_integration_service
    image: ${MY_REPO}/accessgroup-integration-service:${BB_VERSION}
    ports:
      - "8056:8080"
    environment:
      <<: [*common-variables, *message-broker-variables]
      "BACKBASE_AUTHENTICATORS_CHANNELS_SMS": "true"
    volumes:
      - ./scripts:/tmp/h
    healthcheck:
      <<: *healthcheck-defaults
      test: [ "CMD", "java", "/tmp/h/HealthCheck.java", "http://registry:8080/eureka/apps/accessgroup-integration-service", "<status>UP</status>" ]
    links:
      - activemq
      - registry

  contact-manager:
    container_name: contact_manager
    image: ${MY_REPO}/contact-manager:${BB_VERSION}
    ports:
      - "8058:8080"
    environment:
      <<: [*common-variables, *message-broker-variables, *database-variables]
      spring.datasource.url: jdbc:mysql://mysql:3306/contact-manager?useSSL=false&allowPublicKeyRetrieval=true&cacheServerConfiguration=true&createDatabaseIfNotExist=true
    volumes:
      - ./scripts:/tmp/h
    healthcheck:
      <<: *healthcheck-defaults
      test: [ "CMD", "java", "/tmp/h/HealthCheck.java", "http://registry:8080/eureka/apps/contact-manager", "<status>UP</status>" ]
    depends_on:
      mysql:
        condition: service_healthy
    links:
      - activemq
      - registry

  contentservices:
    container_name: contentservices
    image: ${MY_REPO}/contentservices:${BB_VERSION}
    ports:
      - "8058:8080"
    environment:
      <<: [*common-variables, *message-broker-variables, *database-variables]
      spring.datasource.url: jdbc:mysql://mysql:3306/contentservices?useSSL=false&allowPublicKeyRetrieval=true&cacheServerConfiguration=true&createDatabaseIfNotExist=true
    volumes:
      - ./scripts:/tmp/h
    healthcheck:
      <<: *healthcheck-defaults
      test: [ "CMD", "java", "/tmp/h/HealthCheck.java", "http://registry:8080/eureka/apps/contentservices", "<status>UP</status>" ]
    depends_on:
      mysql:
        condition: service_healthy
    links:
      - activemq
      - registry

  approval-service:
    container_name: approval_service
    image: ${MY_REPO}/approval-service:${BB_VERSION}
    ports:
      - "8032:8080"
    environment:
      <<: [*common-variables, *message-broker-variables, *database-variables]
      spring.datasource.url: jdbc:mysql://mysql:3306/approval-service?useSSL=false&allowPublicKeyRetrieval=true&cacheServerConfiguration=true&createDatabaseIfNotExist=true
    volumes:
      - ./scripts:/tmp/h
    healthcheck:
      <<: *healthcheck-defaults
      test: [ "CMD", "java", "/tmp/h/HealthCheck.java", "http://registry:8080/eureka/apps/approval-service", "<status>UP</status>" ]
    depends_on:
      mysql:
        condition: service_healthy
    links:
      - activemq
      - registry

  limit:
    container_name: limit
    image: ${MY_REPO}/limit:${BB_VERSION}
    ports:
      - "8032:8080"
    environment:
      <<: [*common-variables, *message-broker-variables, *database-variables]
      spring.datasource.url: jdbc:mysql://mysql:3306/limit?useSSL=false&allowPublicKeyRetrieval=true&cacheServerConfiguration=true&createDatabaseIfNotExist=true
    volumes:
      - ./scripts:/tmp/h
    healthcheck:
      <<: *healthcheck-defaults
      test: [ "CMD", "java", "/tmp/h/HealthCheck.java", "http://registry:8080/eureka/apps/limit", "<status>UP</status>" ]
    depends_on:
      mysql:
        condition: service_healthy
    links:
      - activemq
      - registry

  payment-order-integration-service:
    container_name: payment_order_integration_service
    image: ${MY_REPO}/payment-order-integration-service:DBS-2.18.0
    ports:
      - "8037:8080"
    environment:
      <<: [*common-variables, *message-broker-variables]
    volumes:
      - ./scripts:/tmp/h
    healthcheck:
      <<: *healthcheck-defaults
      test: [ "CMD", "java", "/tmp/h/HealthCheck.java", "http://registry:8080/eureka/apps/payment-order-integration-service", "<status>UP</status>" ]
    depends_on:
      mysql:
        condition: service_healthy
    links:
      - activemq
      - registry

  payment-order-options:
    container_name: payment_order_options
    image: ${MY_REPO}/payment-order-options:${BB_VERSION}
    ports:
      - "8038:8080"
    environment:
      <<: [*common-variables, *message-broker-variables]
    volumes:
      - ./scripts:/tmp/h
    healthcheck:
      <<: *healthcheck-defaults
      test: [ "CMD", "java", "/tmp/h/HealthCheck.java", "http://registry:8080/eureka/apps/payment-order-options", <status>UP</status>" ]
    depends_on:
      mysql:
        condition: service_healthy
    links:
      - activemq
      - registry

  payment-order-service:
    container_name: payment_order_service
    image: ${MY_REPO}/payment-order-service:${BB_VERSION}
    ports:
      - "8039:8080"
    environment:
      <<: [*common-variables, *message-broker-variables, *database-variables]
      spring.datasource.url: jdbc:mysql://mysql:3306/payment-order-service?useSSL=false&allowPublicKeyRetrieval=true&cacheServerConfiguration=true&createDatabaseIfNotExist=true
    volumes:
      - ./scripts:/tmp/h
    healthcheck:
      <<: *healthcheck-defaults
      test: [ "CMD", "java", "/tmp/h/HealthCheck.java", "http://registry:8080/eureka/apps/payment-order-service", "<status>UP</status>" ]
    depends_on:
      mysql:
        condition: service_healthy
    links:
      - activemq
      - registry

  business-universal:
    container_name: business_universal
    image: ${MY_REPO}/business-universal:${BUSINESS_WEB_VERSION}
    ports:
      - "4200:4200"
    environment:
      "LOG_LEVEL": debug
      "SIG_SECRET_KEY": "JWTSecretKeyDontUseInProduction!"
      "USERCTX_KEY": "JWTSecretKeyDontUseInProduction!"
      "EXTERNAL_ENC_SECRET_KEY": "JWTEncKeyDontUseInProduction666!"
      "backbase-env-jwt": "JWTEncKeyDontUseInProduction666!"
      "API_ROOT": "https://10.162.86.210:8280/api"
      "AUTH_URL": "https://10.162.86.210:8180/auth"
      "AUTH_REALM": "backbase"
      "AUTH_CLIENT_ID": "bb-web-client"

  # <EXAMPLE-SERVICE-NAME>:
  #   container_name: example_service
  #   image: <DOCKER-REGISTRY>/<REPOSITORY-NAME>:<TAG>
  #   ports:
  #     - "8090:8080"
  #   environment:
  #     <<: *common-variables
  #     eureka.client.enabled: 'true'
  #   volumes:
  #     - ./scripts:/tmp/h
  #   healthcheck:
  #     <<: *healthcheck-defaults
  #     test: [ "CMD", "java", "/tmp/h/HealthCheck.java", "http://registry:8080/eureka/apps/<EXAMPLE-SERVICE-NAME>", "<status>UP</status>" ]
  #   links:
  #     - registry
